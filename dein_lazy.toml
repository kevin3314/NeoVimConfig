[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#jedi#enable_type_info = 1
let g:deoplete#sources#jedi#show_docstring = 1

let g:deoplete#sources#jedi#python_path = g:python3_host_prog

let g:deoplete#max_list = 50
let g:deoplete#auto_complee_delay = 1
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#sources#jedi#ignore_errors = 1
inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
on_i = 1

#python
[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
on_i = 1
on_ft = ['py', 'python']

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['py', 'python']
hook_add = '''
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_stubs_command = "<leader>s"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>u"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
'''

[[plugins]]
repo = "pixelneo/vim-python-docstring"
on_ft = ['py', 'python']

#ruby
#repo = 'uplus/deoplete-solargraph'
#soragraph
#repo = 'tbodt/deoplete-tabnine',  { 'do': './install.sh' }

[[plugins]]
repo = 'shougo/neco-vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'shougo/neco-syntax'
on_source = ['deoplete.nvim']

[[plugins]]
# neosnippet
repo = 'Shougo/neosnippet.vim'
hook_source = '''
  "Ctrl+Kにターゲットジャンプ割当
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'wokalski/autocomplete-flow'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_column_always = 1
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '△'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_linter= {
  \ 'javascript' : ['eslint'],
  \ 'python': ['flake8'],
  \ 'ruby'  : ['rubocop'],
  \ 'rust'  : ['rls'],
  \ }
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'

let g:ale_fixers = {
    \ 'javascript' : ['eslint'],
    \ 'python': ['autopep8', 'black', 'isort', 'yapf'],
    \ 'ruby'  : ['rubocop'],
    \ 'rust'  : ['rustfmt'],
    \ }

let g:ale_fix_on_save = 0
'''
on_ft = ['py', 'python', 'rb', 'ruby', 'rust']

# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
    let g:rustfmt_autosave = 1
    let g:rust_doc#define_map_K = 0
'''

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = 'rust'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#rust#racer_binary=systemlist('which racer')[0]
    let g:deoplete#sources#rust#rust_source_path=system('echo -n "$(rustc --print sysroot)/lib/rustlib/src/rust/src"')

    let $RUST_SRC_PATH=system('echo -n "$(rustc --print sysroot)/lib/rustlib/src/rust/src"')
    let g:deoplete#sources#rust#show_duplicates=1
    let g:deoplete#sources#rust#disable_keymap=1
    nmap <buffer> gd <plug>DeopleteRustGoToDefinitionDefault
    nmap <buffer> K  <plug>DeopleteRustShowDocumentation
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
build = 'cd app & yarn install'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
hook_add = '''
" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" default: ''
let g:mkdp_browser = ''

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {}
    \ }

" use a custom markdown style must be absolute path
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'
'''
